{"version":3,"sources":["img/SkriptHubLogoWhite.svg","components/Toaster.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppToaster","Toaster","create","position","Position","BOTTOM_RIGHT","ReactGA","initialize","pageview","window","location","pathname","search","App","useState","theme","language","parseUrl","setParseUrl","value","setValue","scriptErrors","setScriptErrors","scriptWarnings","setScriptWarnings","syntaxList","setSyntaxList","isParsing","setIsParsing","editorInstance","useRef","buildValuePattern","baseValue","replace","match","parseSkript","axios","post","script","then","response","data","errors","warnings","catch","err","show","message","intent","Intent","DANGER","useEffect","console","log","undefined","current","ListOfErrors","ListOfLines","split","monaco","init","monacoInstance","error","linelookup","line","errorObject","startLineNumber","startColumn","endLineNumber","endColumn","length","severity","MarkerSeverity","Error","push","editor","setModelMarkers","getModel","monacoIns","completionItems","flatMap","syntax","i","syntax_pattern_list","syntax_pattern","syntax_type","label","kind","languages","CompletionItemKind","Snippet","insertText","detail","title","addon","name","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","documentation","description","registerCompletionItemProvider","provideCompletionItems","suggestions","ListOfWarnings","warning","warningObject","delayedParsing","debounce","getListOfDetails","listOfValues","tableBody","map","interactive","bordered","striped","className","Group","align","Alignment","LEFT","Heading","src","SkriptHubLogo","style","height","alt","Divider","href","Classes","MINIMAL","icon","text","RIGHT","content","leftIcon","onChange","e","target","placeholder","marginRight","marginLeft","loading","onClick","flexGrow","ev","localValue","editorDidMount","_","register","id","setMonarchTokensProvider","keywords","typeKeywords","operators","tokenizer","root","include","cases","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody","skriptVariables","skriptVariablesBody","skriptOptionsVariable","skriptOptionsVariableBody","brackets","open","close","token","setLanguageConfiguration","comments","lineComment","blockComment","autoClosingPairs","notIn","surroundingPairs","onEnterRules","beforeText","RegExp","action","indentAction","IndentAction","Indent","folding","offSide","markers","start","end","get","background","float","usePortal","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbdd208a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/SkriptHubLogoWhite.467b0133.svg\";","// Pulled from https://blueprintjs.com/docs/#core/components/toast.example\r\nimport { Position, Toaster } from \"@blueprintjs/core\";\r\n \r\n/** Singleton toaster instance. Create separate instances for different options. */\r\nexport const AppToaster = Toaster.create({\r\n    position: Position.BOTTOM_RIGHT\r\n});","import './App.css';\nimport { ControlledEditor } from \"@monaco-editor/react\";\nimport { monaco } from '@monaco-editor/react';\nimport { Navbar, Alignment, Tooltip, InputGroup, Button, Classes, Popover, Position, HTMLTable, Intent} from \"@blueprintjs/core\";\nimport debounce from 'lodash/debounce'\nimport flatMap from 'lodash/flatMap'  \nimport React, { useState, useRef, useEffect } from \"react\";\nimport SkriptHubLogo from \"./img/SkriptHubLogoWhite.svg\"\nimport axios from \"axios\"\nimport { AppToaster } from \"./components/Toaster\";\nimport ReactGA from \"react-ga\";\n\nReactGA.initialize(\"G-JM8FWFTDGE\");\nReactGA.pageview(window.location.pathname + window.location.search);\n\nfunction App() {\n  const [theme] = useState(\"dark\");\n  const [language] = useState(\"skript\");\n  const [parseUrl, setParseUrl] = useState(\"http://localhost:8020/parse\");\n  const [value, setValue] = useState(\"# Put you script below\");\n  const [scriptErrors, setScriptErrors] = useState([]);\n  const [scriptWarnings, setScriptWarnings] = useState([]);\n  const [syntaxList, setSyntaxList] = useState([]);\n  const [isParsing, setIsParsing] = useState(false);\n  const editorInstance = useRef();\n\n  function buildValuePattern(baseValue) {\n    function convert(match) {\n        return \"${1:\" + match + \"}\";\n    }\n    let regex = /(%)(?:(?=(\\\\?))\\2.)*?\\1/\n    return baseValue.replace(regex, convert);\n  }\n\n  function buildActiveCompletionItems(monacoIns) {\n    return flatMap(syntaxList, (syntax) => {\n      let syntax_pattern_list = syntax.syntax_pattern.split('\\n');\n      let completionItems = [];\n      let i;\n      for (i = 0; i < syntax_pattern_list.length; i++) { \n        // Add \":\\n\\t\" for events\n        if(syntax.syntax_type === 'event'){\n          completionItems.push({\n            label: syntax_pattern_list[i],\n            kind: monacoIns.languages.CompletionItemKind.Snippet,\n            insertText: buildValuePattern(syntax_pattern_list[i]) + ':\\n\\t',\n            insertTextRules: monacoIns.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            detail: syntax.title + \" - \" + syntax.syntax_type + \" - \" + syntax.addon.name,\n            documentation: syntax.description\n          });\n          continue;\n        }\n      \n\n        completionItems.push({\n            label: syntax_pattern_list[i],\n            kind: monacoIns.languages.CompletionItemKind.Snippet,\n            insertText: buildValuePattern(syntax_pattern_list[i]),\n            detail: syntax.title + \" - \" + syntax.syntax_type + \" - \" + syntax.addon.name,\n            insertTextRules: monacoIns.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            documentation: syntax.description\n        });\n      }\n      return completionItems;\n  });\n}\n\n  function handleEditorDidMount(_, editor) {\n    editorInstance.current = editor;\n\n    monaco\n    .init()\n    .then((monacoInstance) => {\n      // Register a new language\n      monacoInstance.languages.register({ id: \"skript\" });\n    \n      // Register a tokens provider for the language\n      monacoInstance.languages.setMonarchTokensProvider(\"skript\", {\n        keywords: [\n          'set', 'continue', 'for', 'new', 'switch', 'assert', 'goto', 'do',\n          'if', 'private', 'this', 'break', 'protected', 'throw', 'else', 'public',\n          'enum', 'return', 'catch', 'try', 'interface', 'static', 'class',\n          'finally', 'const', 'super', 'while', 'true', 'false', \"trigger\"\n        ],\n      \n        typeKeywords: [\n          'boolean', 'double', 'byte', 'int', 'short', 'char', 'void', 'long', 'float'\n        ],\n      \n        operators: [\n          '=', '>', '<', '!', '~', '?', ':', '==', '<=', '>=', '!=',\n          '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%',\n          '<<', '>>', '>>>', '+=', '-=', '*=', '/=',\n        ],\n  \n        tokenizer: {\n          root: [\n            { include: '@whitespace' },\n            { include: '@numbers' },\n            { include: '@strings' },\n            { include: '@skriptOptionsVariable' },\n            { include: '@skriptVariables' },\n            \n      \n            [/[,:;]/, 'delimiter'],\n            [/[{}[\\]()%]/, '@brackets'],\n      \n            [/@[a-zA-Z]\\w*/, 'tag'],\n            [/[a-zA-Z]\\w*/, {\n              cases: {\n                '@typeKeywords': 'keyword',\n                '@keywords': 'keyword',\n                '@default': 'identifier'\n              }\n            }]\n          ],\n          whitespace: [\n            [/\\s+/, 'white'],\n            [/(^#.*$)/, 'comment'],\n            [/('''.*''')|(\"\"\".*\"\"\")/, 'string'],\n            [/'''.*$/, 'string', '@endDocString'],\n            [/\"\"\".*$/, 'string', '@endDblDocString']\n          ],\n          endDocString: [\n            [/\\\\'/, 'string'],\n            [/.*'''/, 'string', '@popall'],\n            [/.*$/, 'string']\n          ],\n          endDblDocString: [\n            [/\\\\\"/, 'string'],\n            [/.*\"\"\"/, 'string', '@popall'],\n            [/.*$/, 'string']\n          ],\n      \n          // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n          numbers: [\n            [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\n            [/-?(\\d*\\.)?\\d+([eE][+-]?\\d+)?[jJ]?[lL]?/, 'number']\n          ],\n      \n          // Recognize strings, including those broken across lines with \\ (but not without)\n          strings: [\n            [/'$/, 'string.escape', '@popall'],\n            [/'/, 'string.escape', '@stringBody'],\n            [/\"$/, 'string.escape', '@popall'],\n            [/\"/, 'string.escape', '@dblStringBody']\n          ],\n          stringBody: [\n            [/\\\\./, 'string'],\n            [/'/, 'string.escape', '@popall'],\n            [/.(?=.*')/, 'string'],\n            [/.*\\\\$/, 'string'],\n            [/.*$/, 'string', '@popall']\n          ],\n          dblStringBody: [\n            [/\\\\./, 'string'],\n            [/\"/, 'string.escape', '@popall'],\n            [/.(?=.*\")/, 'string'],\n            [/.*\\\\$/, 'string'],\n            [/.*$/, 'string', '@popall']\n          ],\n          skriptVariables: [\n            [/}$/, 'skriptVariable.escape', '@popall'],\n            [/{/, 'skriptVariable.escape', '@skriptVariablesBody']\n          ],\n          skriptVariablesBody: [\n            [/\\\\./, 'skriptVariable'],\n            [/}/, 'skriptVariable.escape', '@popall'],\n            [/.(?=.*})/, 'skriptVariable'],\n            [/.*\\\\$/, 'skriptVariable'],\n            [/.*$/, 'skriptVariable', '@popall']\n          ],\n          skriptOptionsVariable: [\n            [/}$/, 'skriptOptions.escape', '@popall'],\n            [/{@/, 'skriptOptions.escape', '@skriptOptionsVariableBody']\n          ],\n          skriptOptionsVariableBody: [\n            [/\\\\./, 'skriptOptions'],\n            [/}/, 'skriptOptions.escape', '@popall'],\n            [/.(?=.*})/, 'skriptOptions'],\n            [/.*\\\\$/, 'skriptOptions'],\n            [/.*$/, 'skriptOptions', '@popall']\n          ],\n          \n        },\n        brackets: [\n          { open: '[', close: ']', token: 'delimiter.bracket' },\n          { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        ],\n      });\n\n      monacoInstance.languages.setLanguageConfiguration(\"skript\", {\n        comments: {\n          lineComment: '#',\n          blockComment: ['\\'\\'\\'', '\\'\\'\\''],\n        },\n        brackets: [\n          ['{', '}'],\n          ['[', ']'],\n          ['(', ')']\n        ],\n        autoClosingPairs: [\n          { open: '{', close: '}' },\n          { open: '[', close: ']' },\n          { open: '(', close: ')' },\n          { open: '%', close: '%' },\n          { open: '\"', close: '\"', notIn: ['string'] },\n          { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n        ],\n        surroundingPairs: [\n          { open: '{', close: '}' },\n          { open: '[', close: ']' },\n          { open: '(', close: ')' },\n          { open: '%', close: '%' },\n          { open: '\"', close: '\"' },\n          { open: '\\'', close: '\\'' },\n        ],\n        onEnterRules: [\n          {\n            beforeText: new RegExp(\"^\\\\s*(?:def|on|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$\"),\n            action: { indentAction: monacoInstance.languages.IndentAction.Indent }\n          }\n        ],\n        folding: {\n          offSide: true,\n          markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n          }\n        }\n      })\n      \n    })\n    .catch((error) =>\n      console.error(\"An error occurred during initialization of Monaco: \", error)\n    );\n\n    axios.get(\"https://skripthub.net/api/v1/addonsyntaxlist/\")\n    .then(response => {\n      setSyntaxList(response.data);\n    })\n  }\n\n  useEffect(() => {\n    console.log(scriptErrors)\n\n    if (editorInstance.current === undefined){\n      return\n    }\n\n    var ListOfErrors = [];\n    var ListOfLines = value.split(\"\\n\")\n\n    monaco\n    .init()\n    .then((monacoInstance) => {\n\n      for (let error of scriptErrors) {\n        var linelookup = (error.line === 0) ? 0 : error.line - 1;\n        var errorObject = {\n          startLineNumber: error.line,\n          startColumn: 0,\n          endLineNumber: error.line,\n          endColumn: ListOfLines[linelookup].length + 1,\n          message: error.message,\n          severity: monacoInstance.MarkerSeverity.Error\n        }\n\n        ListOfErrors.push(errorObject);\n      }\n\n      monacoInstance.editor.setModelMarkers(editorInstance.current.getModel(), \"errors\", ListOfErrors);\n    });\n  }, [scriptErrors]);\n\n  useEffect(() => {\n    console.log(syntaxList)\n\n    if (editorInstance.current === undefined){\n      return\n    }\n\n    monaco\n    .init()\n    .then((monacoInstance) => {\n      const completionItems = buildActiveCompletionItems(monacoInstance);\n\n      console.log(completionItems);\n\n      // Register a completion item provider for the new language\n      monacoInstance.languages.registerCompletionItemProvider(\"skript\", {\n        provideCompletionItems: () => { return {suggestions: completionItems} }\n      });\n    });\n  }, [syntaxList]);\n\n  useEffect(() => {\n    console.log(scriptWarnings)\n    if (editorInstance.current === undefined){\n      return\n    }\n    var ListOfWarnings = [];\n    var ListOfLines = value.split(\"\\n\")\n\n    monaco\n    .init()\n    .then((monacoInstance) => {\n      for (let warning of scriptWarnings) {\n        var linelookup = (warning.line === 0) ? 0 : warning.line - 1;\n        var warningObject = {\n          startLineNumber: warning.line,\n          startColumn: 0,\n          endLineNumber: warning.line,\n          endColumn: ListOfLines[linelookup].length + 1,\n          message: warning.message,\n          severity: monacoInstance.MarkerSeverity.Error\n        }\n        ListOfWarnings.push(warningObject);\n      }\n\n      monacoInstance.editor.setModelMarkers(editorInstance.current.getModel(), \"warnings\", ListOfWarnings);\n    });\n  }, [scriptWarnings]);\n\n  function parseSkript() {\n    setIsParsing(true)\n    axios.post(parseUrl, {\n      script: value\n    }).then(function (response) {\n      setScriptErrors(response.data.errors);\n      setScriptWarnings(response.data.warnings);\n      setIsParsing(false)\n    }).catch(err => {\n      AppToaster.show({ \n        message: `${err}`,\n        intent: Intent.DANGER\n      });\n      setIsParsing(false)\n    });\n  }\n\n  const delayedParsing = useRef(debounce(() => parseSkript(), 200)).current;\n\n  const handleEditorChange = (ev, localValue) => {\n    setValue(localValue);\n    delayedParsing();\n  };\n\n  const getListOfDetails = (listOfValues) => {\n    const tableBody = listOfValues.map((value) =>\n      <tr>\n        <td>{value.line}</td>\n        <td>{value.message}</td>\n      </tr>\n    );\n\n    return <HTMLTable interactive={true} bordered={true} striped={true}>\n      <thead>\n        <tr>\n          <th>Line</th>\n          <th>Error</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tableBody}\n      </tbody>\n    </HTMLTable>\n  };\n\n  return (\n    <>\n      <Navbar className=\"bp3-dark\">\n        <Navbar.Group align={Alignment.LEFT}>\n            <Navbar.Heading>Skript.Dev by</Navbar.Heading>\n            <img src={SkriptHubLogo} style={{height: \"30px\"}} alt=\"Skript Hub Logo\"/>\n            <Navbar.Divider />\n            <a href=\"https://skripthub.net/docs/\"><Button className={Classes.MINIMAL} icon=\"book\" text=\"Skript Docs\" /></a>\n            <a href=\"https://skripthub.net/tutorials/\"><Button className={Classes.MINIMAL} icon=\"annotation\" text=\"Skript Tutorials\" /></a>\n        </Navbar.Group>\n\n        <Navbar.Group align={Alignment.RIGHT}>\n          <Tooltip content=\"Set your Parsing servers URL. If you are running it as a server on your computer its probably http://localhost:8020/parse\">\n            <InputGroup\n                leftIcon=\"cloud\"\n                onChange={e => setParseUrl(e.target.value)}\n                placeholder=\"Parsing Server URL...\"\n                value={parseUrl}\n                style={{marginRight: \"6px\"}}\n            />\n          </Tooltip>\n          <Button style={{marginLeft: \"10px\"}} icon=\"refresh\" text=\"Parse\" loading={isParsing} onClick={e => parseSkript()} />\n        </Navbar.Group>\n      </Navbar>\n      <div style={{flexGrow: 1}}>\n        <ControlledEditor\n            theme={theme}\n            language={language}\n            value={value}\n            onChange={handleEditorChange}\n            editorDidMount={handleEditorDidMount}\n            loading={\"Loading...\"}\n          />\n      </div>\n      <div className=\"bp3-dark\" style={{height: \"30px\", background: \"#634DBF\"}}>\n        <div style={{float: \"right\"}}>\n          <Popover className=\"bp3-dark\" position={Position.BOTTOM_RIGHT} usePortal={false} content={<div class=\"warning-popover\">{getListOfDetails(scriptWarnings)}</div>}>\n            <Button className={Classes.MINIMAL} icon=\"warning-sign\">{scriptWarnings.length}</Button>\n          </Popover>\n          <Popover className=\"bp3-dark\" position={Position.BOTTOM_RIGHT} usePortal={false} content={<div class=\"warning-popover\">{getListOfDetails(scriptErrors)}</div>}>\n            <Button className={Classes.MINIMAL} icon=\"error\">{scriptErrors.length}</Button>\n          </Popover>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}